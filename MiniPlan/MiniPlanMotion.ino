int ACTION_01_STEPS = 1;
int ACTION_02_STEPS = 4;
int ACTION_03_STEPS = 9;
int ACTION_04_STEPS = 8;
int ACTION_05_STEPS = 7;
int ACTION_06_STEPS = 12;
int ACTION_07_STEPS = 16;
int ACTION_08_STEPS = 27;
int ACTION_09_STEPS = 19;
int ACTION_10_STEPS = 27;
int ACTION_11_STEPS = 27;

// ES08MDII - 達文西姿勢
/////////////////////////////////////////////////////    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
int actionDavinci [ ] PROGMEM = {   65,      35,      80,      60,      80,     100,     20,      80,      40,     100,      20,       30,       55,       35,       75,       50,        90,       90,        0     };

// ES08MDII - 立正
/////////////////////////////////////////////////////    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
int action00 [ ] PROGMEM = {   65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,        0     };



// 待機姿勢
int action01 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      500   }     // 立正
};

// 鞠躬動作
int action02 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      35,      80,      60,      80,     120,     80,      40,     110,     25,      100,      30,       55,       35,       75,       50,        90,       90,      500   },     // 立正 右手前平舉內彎 左手後擺
  {    65,      20,      80,      10,      80,     120,     80,      40,     110,     25,      100,      30,      102,      35,       90,       50,        90,       90,      500   },     // 立正 右手前平舉內彎 左手後擺 鞠躬
  {    65,      20,      80,      10,      80,     120,     80,      40,     110,     25,      100,      30,      102,      35,       90,       50,        90,       90,      1000 },     //  鞠躬動作 等待
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      800   }      // 立正
};

// 揮手動作
int action03 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      35,      80,      60,      80,     100,     95,      80,      20,      70,      120,      30,       55,       35,       75,       50,        50,       90,      500   },     // 立正 右手上抬向外 頭右轉
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      30,      120,      30,       55,       35,       75,       50,        50,       90,      300   },     // 立正 右手上抬向內 頭右轉
  {    65,      35,      80,      60,      80,     100,     95,      80,      20,      70,      120,      30,       55,       35,       75,       50,        50,       90,      300   },     // 立正 右手上抬向外 頭右轉
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      30,      120,      30,       55,       35,       75,       50,        50,       90,      300   },     // 立正 右手上抬向內 頭右轉
  {    65,      35,      80,      60,      80,       0,       50,     100,     40,      30,       25,       30,       55,       35,       75,       50,       130,      90,      500   },     // 立正 左手上抬向外 頭左轉
  {    65,      35,      80,      60,      80,       0,       80,      80,      40,      30,       25,       30,       55,       35,       75,       50,       130,      90,      300   },     // 立正 左手上抬向內 頭左轉
  {    65,      35,      80,      60,      80,       0,       50,     100,     40,      30,       25,       30,       55,       35,       75,       50,       130,      90,      300   },     // 立正 左手上抬向外 頭左轉
  {    65,      35,      80,      60,      80,       0,       80,      80,      40,      30,       25,       30,       55,       35,       75,       50,       130,      90,      300   },     // 立正 左手上抬向內 頭左轉
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      500   }      // 立正
};


// 鋼鐵人動作
int action04 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    75,      35,      80,      60,      90,     120,     70,     120,      0,      100,      20,       40,       55,       35,       75,       60,        50,       90,      300   },     // 身體左傾斜 右手上抬 掌向外 頭右轉
  {    75,      35,      80,      60,      90,     120,     70,     120,      0,      100,      20,       40,       55,       35,       75,       60,        50,       90,      800   },     // 身體左傾斜 右手上抬 掌向外 頭右轉
  {    55,      35,      80,      60,      70,     100,     20,     120,      0,       50,        0,        20,       55,       35,       75,       40,       130,      90,      300   },     // 身體右傾斜 左手上抬 掌向外 頭左轉
  {    55,      35,      80,      60,      70,     100,     20,     120,      0,       50,        0,        20,       55,       35,       75,       40,       130,      90,      800   },     // 身體右傾斜 左手上抬 掌向外 頭左轉
  {    65,      35,      80,      60,      80,      20,      70,     120,      0,       50,      100,      30,       55,       35,       75,       50,        90,       90,      500   },     // 立正 雙手上抬 掌向外
  {    65,      20,      80,      45,      80,      20,     105,    120,      0,       10,      100,      30,       70,       35,       89,       50,        90,       90,      500   },     // 身體後傾斜 雙手上抬 掌向內
  {    65,      20,      80,      45,      80,      20,     105,    120,      0,       10,      100,      30,       70,       35,       89,       50,        90,       90,      800   },     // 身體後傾斜 雙手上抬 掌向內 
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      500   }      // 立正
};


// 阿帕契動作
int action05 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    55,      35,      80,      60,      70,     100,     70,      30,      40,      80,       20,       20,       55,       35,       75,       40,        90,       90,      500   },    // 身體右傾斜
  {    55,      35,      80,      60,      70,     100,     70,      30,      40,      80,       20,       20,       55,       35,       75,       35,       130,      90,      300   },    // 身體右傾斜 左腳預抬 頭左轉
  {    55,      35,      80,      60,      70,     100,     70,      30,     100,     10,      100,      40,       55,       35,       75,       30,       130,      90,      500   },    // 身體右傾斜 右手敬禮 左腳上抬 頭左轉
  {    55,      35,      80,      60,      70,     100,     70,      30,     100,     10,      100,      40,       55,       35,       75,       30,       130,      90,      800   },    // 身體右傾斜 右手敬禮 左腳上抬 頭左轉
  {    55,      35,      80,      60,      70,     100,     70,      30,      40,      80,       20,       20,       55,       35,       75,       35,       130,      90,      600   },    // 身體右傾斜 左腳預抬 頭左轉
  {    55,      35,      80,      60,      70,     100,     70,      30,      40,      80,       20,       20,       55,       35,       75,       40,        90,       90,      500   },    // 身體右傾斜
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      500   }      // 立正
};


// 單腳平衡動作
int action06 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    75,      35,      80,      60,      90,     100,     20,      80,      40,     100,      20,       40,       55,       35,       75,       60,        90,       90,      500   },     // 身體左傾斜 雙手平舉上抬
  {    75,      35,      80,      60,      90,      50,      20,      80,      40,     100,      70,       40,       55,       35,       80,       60,        90,       90,      300   },     // 身體左傾斜 雙手平舉上抬旋轉 右腳預抬
  {    80,      35,      80,      60,      70,      50,      20,      80,      40,     100,      70,       40,       55,       35,       80,       60,        90,       90,      500   },     // 身體左傾斜 雙手平舉上抬旋轉 右腳上抬
  {    80,      35,      80,      60,      70,      50,      20,      80,      40,     100,      70,       40,       55,       35,       80,       60,        90,       90,      600   },     // 身體左傾斜 雙手平舉上抬旋轉 右腳上抬
  {    80,      15,      80,       0,       70,      50,      20,      80,      40,     100,      70,       40,       55,       35,       80,       60,        90,       90,      900   },     // 身體前傾斜 雙手平舉上抬旋轉 右腳上抬
  {    80,      15,      80,       0,       70,      50,       0,       80,      40,     120,      70,       40,       55,       35,       80,       60,        50,       90,      500   },     // 身體前傾斜 雙手平舉上抬旋轉 右腳上抬 上
  {    80,      15,      80,       0,       70,      50,      40,      80,      40,      80,       70,       40,       55,       35,       80,       60,       130,      90,      500   },     // 身體前傾斜 雙手平舉上抬旋轉 右腳上抬 下
  {    80,      15,      80,       0,       70,      50,       0,       80,      40,     120,      70,       40,       55,       35,       80,       60,        50,       90,      500   },     // 身體前傾斜 雙手平舉上抬旋轉 右腳上抬 上
  {    80,      15,      80,       0,       70,      50,      40,      80,      40,      80,       70,       40,       55,       35,       80,       60,       130,      90,      500   },     // 身體前傾斜 雙手平舉上抬旋轉 右腳上抬 下
  {    80,      15,      80,       0,       70,      50,      20,      80,      40,     100,      70,       40,       55,       35,       80,       60,        90,       90,      500   },     // 身體前傾斜 雙手平舉上抬旋轉 右腳上抬
  {    80,      35,      80,      60,      70,      50,      20,      80,      40,     100,      70,       40,       55,       35,       80,       60,        90,       90,      800   },     // 身體左傾斜 雙手平舉上抬旋轉 右腳上抬
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      500   }      // 立正
};


// 暖身動作
int action07 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      35,      80,      60,      80,     100,     70,      20,     100,     50,       20,       30,       55,       35,       75,       50,        90,       90,      800   },     // 雙手插腰
  {    65,      35,      80,      60,      80,     100,     70,      20,     100,     50,       20,       30,       55,       35,       75,       50,        50,       90,      500   },     // 雙手插腰 頭右轉
  {    65,      35,      80,      60,      80,     100,     70,      20,     100,     50,       20,       30,       55,       35,       75,       50,        50,       90,      500   },     // 雙手插腰 頭右轉
  {    65,      35,      80,      60,      80,     100,     70,      20,     100,     50,       20,       30,       55,       35,       75,       50,       130,      90,      500   },     // 雙手插腰 頭左轉
  {    65,      35,      80,      60,      80,     100,     70,      20,     100,     50,       20,       30,       55,       35,       75,       50,       130,      90,      500   },     // 雙手插腰 頭左轉
  {    55,      35,      80,      60,      70,     100,     70,      20,      40,     100,      20,       20,       55,       35,       75,       40,        50,       90,      800   },     // 身體右傾斜 右手平舉 左手擺頭頂 頭右轉
  {    55,      35,      80,      60,      70,     100,     70,      20,      40,     100,      20,       20,       55,       35,       75,       40,        50,       90,      500   },     // 身體右傾斜 右手平舉 左手擺頭頂 頭右轉
  {    75,      35,      80,      60,      90,     100,     20,      80,     100,     50,       20,       40,       55,       35,       75,       60,       130,      90,      800   },     // 身體左傾斜 左手平舉 右手擺頭頂 頭左轉
  {    75,      35,      80,      60,      90,     100,     20,      80,     100,     50,       20,       40,       55,       35,       75,       60,       130,      90,      500   },     // 身體左傾斜 左手平舉 右手擺頭頂 頭左轉
  {    65,      35,      80,      60,      80,     100,     70,      20,     100,     50,       20,       30,       55,       35,       75,       50,        90,       90,      500   },     // 雙手插腰
  {    65,      62,      15,      17,      80,      15,      95,      80,      40,      25,      100,      30,       95,      100,      48,       50,        90,       90,      800   },     // 蹲下 雙手向前平舉
  {    65,      62,      15,      17,      80,      15,      95,      80,      40,      25,      100,      30,       95,      100,      48,       50,        90,       90,      300   },     // 蹲下 雙手向前平舉
  {    65,      35,      80,      60,      80,     100,     70,      20,     100,     50,       20,       30,       55,       35,       75,       50,        90,       90,      500   },     // 雙手插腰
  {    65,      62,      15,      17,      80,      15,      95,      80,      40,      25,      100,      30,       95,      100,      48,       50,        90,       90,      800   },     // 蹲下 雙手向前平舉
  {    65,      62,      15,      17,      80,      15,      95,      80,      40,      25,      100,      30,       95,      100,      48,       50,        90,       90,      300   },     // 蹲下 雙手向前平舉
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      800   }      // 立正
};


// 前進動作
int action08 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      59,      36,      39,      80,     100,     95,      80,      40,      25,       20,       30,       75,       80,       50,       50,        90,       90,      500   },     // 淺蹲

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      500   },     // 淺蹲 右傾斜 左腳前移
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       40,        90,       90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       95,      100,      48,       60,        90,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      500   },     // 淺蹲 左傾斜 右腳前移
  {    75,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      500   },     // 淺蹲 右傾斜 左腳前移
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       40,        90,       90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       95,      100,      48,       60,        90,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      500   },     // 淺蹲 左傾斜 右腳前移
  {    75,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      500   },     // 淺蹲 右傾斜 左腳前移
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       40,        90,       90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       95,      100,      48,       60,        90,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      500   },     // 淺蹲 左傾斜 右腳前移
  {    75,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      300   }      // 立正
};


// 後退動作
int action09 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      59,      36,      39,      80,     100,     95,      80,      40,      25,       20,       30,       75,       80,       50,       50,        90,       90,      500   },     // 淺蹲

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      82,      48,      75,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      500   },     // 淺蹲 右傾斜 左腳後移
  {    55,      55,      80,      80,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       95,      100,      48,       60,        50,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       42,       70,       27,       60,        50,       90,      500   },     // 淺蹲 左傾斜 右腳後移
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       35,       35,       51,       60,        50,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      82,      48,      75,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      500   },     // 淺蹲 右傾斜 左腳後移
  {    55,      55,      80,      80,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       95,      100,      48,       60,        50,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       42,       70,       27,       60,        50,       90,      500   },     // 淺蹲 左傾斜 右腳後移
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       35,       35,       51,       60,        50,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      300   }      // 立正
};


// 左轉動作
int action10 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      59,      36,      39,      80,     100,     95,      80,      40,      25,       20,       30,       75,       80,       50,       50,        90,       90,      500   },     // 淺蹲

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       95,      100,      48,       60,        90,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      500   },     // 淺蹲 左傾斜 右腳前移
  {    75,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      82,      48,      75,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      500   },     // 淺蹲 右傾斜 左腳後移
  {    55,      55,      80,      80,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       95,      100,      48,       60,        90,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      500   },     // 淺蹲 左傾斜 右腳前移
  {    75,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      82,      48,      75,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      500   },     // 淺蹲 右傾斜 左腳後移
  {    55,      55,      80,      80,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       95,      100,      48,       60,        90,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      500   },     // 淺蹲 左傾斜 右腳前移
  {    75,      59,      36,      39,      90,      70,      95,      80,      40,      25,        0,        40,       82,       70,       70,       60,        90,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      82,      48,      75,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      500   },     // 淺蹲 右傾斜 左腳後移
  {    55,      55,      80,      80,      70,      70,      95,      80,      40,      25,        0,        20,       75,       80,       50,       35,       130,      90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      300   }      // 立正
};


// 右轉動作
int  action11 [][ALLMATRIX] PROGMEM = {
  //    0    ,    1    ,    2    ,    3    ,    4    ,    5    ,    6    ,    7    ,    8    ,    9    ,    10   ,    11   ,    12   ,    13   ,    14   ,    15   ,   G12   ,  G14   ,  ms
  {    65,      59,      36,      39,      80,     100,     95,      80,      40,      25,       20,       30,       75,       80,       50,       50,        90,       90,      500   },     // 淺蹲

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      500   },     // 淺蹲 右傾斜 左腳前移
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       40,        90,       90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       95,      100,      48,       60,        50,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       42,       70,       27,       60,        50,       90,      500   },     // 淺蹲 左傾斜 右腳後移
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       35,       35,       51,       60,        50,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      500   },     // 淺蹲 右傾斜 左腳前移
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       40,        90,       90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       95,      100,      48,       60,        50,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       42,       70,       27,       60,        50,       90,      500   },     // 淺蹲 左傾斜 右腳後移
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       35,       35,       51,       60,        50,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    55,      62,      15,      17,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      600   },     // 淺蹲 右傾斜 左腳上抬
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       35,        90,       90,      500   },     // 淺蹲 右傾斜 左腳前移
  {    55,      40,      45,      30,      70,     120,     95,      80,      40,      25,       50,       20,       75,       80,       50,       40,        90,       90,      300   },     // 淺蹲 右傾斜 左腳放下

  {    75,      40,      45,      30,      90,     100,     95,      80,      40,      25,       20,       40,       75,       80,       50,       60,        90,       90,      500   },     // 淺蹲 左傾斜
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       95,      100,      48,       60,        50,       90,      600   },     // 淺蹲 左傾斜 右腳上抬
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       42,       70,       27,       60,        50,       90,      500   },     // 淺蹲 左傾斜 右腳後移
  {    80,      59,      36,      39,      90,     120,     95,      80,      40,      25,       50,       40,       35,       35,       51,       60,        50,       90,      300   },     // 淺蹲 左傾斜 右腳放下

  {    55,      59,      36,      39,      70,     100,     95,      80,      40,      25,       20,       20,       75,       80,       50,       40,        90,       90,      500   },     // 淺蹲 右傾斜
  {    65,      35,      80,      60,      80,     100,     95,      80,      40,      25,       20,       30,       55,       35,       75,       50,        90,       90,      300   }      // 立正
};

int getActionSteps(int actionId){
  int steps = 0;
  switch(actionId){
  case ACTION_01:
    steps = ACTION_01_STEPS;
    break;
  case ACTION_02:
    steps = ACTION_02_STEPS;
    break;
  case ACTION_03:
    steps = ACTION_03_STEPS;
    break;
  case ACTION_04:
    steps = ACTION_04_STEPS;
    break;
  case ACTION_05:
    steps = ACTION_05_STEPS;
    break;
  case ACTION_06:
    steps = ACTION_06_STEPS;
    break;
  case ACTION_07:
    steps = ACTION_07_STEPS;
    break;
  case ACTION_08:
    steps = ACTION_08_STEPS;
    break;
  case ACTION_09:
    steps = ACTION_09_STEPS;
    break;
  case ACTION_10:
    steps = ACTION_10_STEPS;
    break;
  case ACTION_11:
    steps = ACTION_11_STEPS;
    break;
  default:
    break;
  }
  return steps;
}
void getAction(int actionId, int actionMatrix [][19]){
  switch(actionId){
  case ACTION_01:
    actionMatrix = action01;
    break;
  case ACTION_02:
    actionMatrix = action02;
    break;
  case ACTION_03:
    actionMatrix = action03;
    break;
  case ACTION_04:
    actionMatrix = action04;
    break;
  case ACTION_05:
    actionMatrix = action05;
    break;
  case ACTION_06:
    actionMatrix = action06;
    break;
  case ACTION_07:
    actionMatrix = action07;
    break;
  case ACTION_08:
    actionMatrix = action08;
    break;
  case ACTION_09:
    actionMatrix = action09;
    break;
  case ACTION_10:
    actionMatrix = action10;
    break;
  case ACTION_11:
    actionMatrix = action11;
    break;
  default:
    actionMatrix = action01;
    break;
  }

}
void resetServo(){
  // 清除備份目前馬達數值, 並且使用立正的姿勢
  for ( int Index = 0; Index < ALLMATRIX; Index++)
  {
    currentPosition[Index] = action00[Index] + readKeyValue(Index);
  }
}

void resetToDavinci()
{
  //達文西姿勢
  // 清除備份目前馬達數值
  for ( int index = 0; index < ALLMATRIX; index++)
  {
    currentPosition[index] = actionDavinci[index] + readKeyValue(index);
  }

  // 重新載入馬達預設數值
  for (int iServo = 0; iServo < ALLSERVOS; iServo++)
  {
    setPWMVal(iServo, currentPosition[iServo]);
    delay(10);
  }
}

/*============================================================================*/
void resetToStand()
{
  //立正
  // 清除備份目前馬達數值
  for ( int index = 0; index < ALLMATRIX; index++)
  {
    currentPosition[index] = action00[index] + readKeyValue(index);
  }

  // 重新載入馬達預設數值
  for (int iServo = 0; iServo < ALLSERVOS; iServo++)
  {
    setPWMVal(iServo, currentPosition[iServo]);
    delay(10);
  }
  Serial.print("resetToStand complete:");
}

/*============================================================================*/
void setPWMVal(int iServoId, int iValue)
{
  int iNewPWM = map(iValue, PWMRES_Min, PWMRES_Max, SERVOMIN, SERVOMAX);

  if (iServoId == 17)
  {
    GPIO14SERVO.write(iValue);
  }
  else if (iServoId == 16)
  {
    GPIO12SERVO.write(iValue);
  }
  else
  {
    pwm.setPWM(iServoId, 0, iNewPWM);
  }
}

//============================================================================

void doAction(int actionId){
  //int iMatrix [][19]= {};
  int steps = 0;
  Serial.print("miniPlan doAction:");
  Serial.println(actionId);
  if (actionId != rollbackAction )
  {
    switch (actionId)
    {
      case ACTION_01:  // 待機姿勢
        Serial.println("miniPlan stand");
        steps = getActionSteps(ACTION_01);
        //getAction(ACTION_01, iMatrix);
        execAction(action01, steps);
        resetToStand();
        break;
      case ACTION_02:  // 鞠躬動作
        Serial.println("miniPlan bow");
        steps = getActionSteps(ACTION_02);
        execAction(action02, steps);
        resetToStand();
        break;
      case ACTION_03:  // 揮手動作
        Serial.println("miniPlan wave");
        steps = getActionSteps(ACTION_03);
        execAction(action03, steps);
        resetToStand();
        break;
      case ACTION_04:  // 鋼鐵人動作
        Serial.println("miniPlan ironman");
        steps = getActionSteps(ACTION_04);
        execAction(action04, steps);
        resetToStand();
        break;
      case ACTION_05:  // 阿帕契動作
        Serial.println("miniPlan apache");
        steps = getActionSteps(ACTION_05);
        //getAction(ACTION_05, iMatrix);
        Serial.print("miniPlan apache step:");
        Serial.println(steps);
        execAction(action05, steps);
        Serial.println("miniPlan apache complete");
        resetToStand();
        break;
      case ACTION_06:  // balance動作
        Serial.println("miniPlan balance");
        steps = getActionSteps(ACTION_06);
        execAction(action06, steps);
        resetToStand();
        break;
      case ACTION_07:  // 暖身動作
        Serial.println("miniPlan warm-up");
        steps = getActionSteps(ACTION_07);
        execAction(action07, steps);
        resetToStand();
        break;
      case ACTION_08:  // 前進動作
        Serial.println("miniPlan forward");
        steps = getActionSteps(ACTION_08);
        execAction(action08, steps);
        resetToStand();
        break;
      case ACTION_09:  // 後退動作
        Serial.println("miniPlan backward");
        steps = getActionSteps(ACTION_09);
        execAction(action09, steps);
        resetToStand();
        break;
      case ACTION_10:  // 左轉動作
        Serial.println("miniPlan left");
        steps = getActionSteps(ACTION_10);
        execAction(action10, steps);
        resetToStand();
        break;
        
      case ACTION_11:  // 右轉動作
        Serial.println("miniPlan right");
        steps = getActionSteps(ACTION_11);
        execAction(action11, steps);
        resetToStand();
        break;
      case 999:  // 待機
        resetToStand();
        delay(300);
        break;
      case 1000:  // 待機
        resetToDavinci();
        delay(300);
        break;
    }
    //actionId = rollbackAction;
    
  }
  Serial.print("doAction complete:");
}

/*============================================================================*/
//執行特定動作
void execAction(int iMatrix[][19],  int iSteps)
{
  int INT_TEMP_A, INT_TEMP_B, INT_TEMP_C;

  for ( int mainActionIndex = 0; mainActionIndex < iSteps; mainActionIndex++)  // iSteps 步驟主迴圈
  {
    //最後一個index
    // InterTotalTime 此步驟總時間

//    Serial.print("miniPlan execAction apache step loop:");
//    Serial.print(mainActionIndex);
//     Serial.print("-");
//      Serial.println(readKeyValue(ALLMATRIX - 1));
    //int InterTotalTime = iMatrix [ MainLoopIndex ] [ ALLMATRIX - 1 ] + Servo_Act_Fix[ALLMATRIX - 1];
    int InterTotalTime = iMatrix [ mainActionIndex ] [ ALLMATRIX - 1 ] + readKeyValue(ALLMATRIX - 1);
    // InterDelayCounter 此步驟基本延遲次數
    int InterDelayCounter = InterTotalTime / BASEDELAYTIME;

    // 內差次數迴圈
    for ( int InterStepLoop = 0; InterStepLoop < InterDelayCounter; InterStepLoop++)
    {
//       Serial.print("miniPlan execAction apache step loop [2]:");
//      Serial.print(InterStepLoop);
//      Serial.print("/");
//      Serial.println(InterTotalTime);
      for (int ServoIndex = 0; ServoIndex < ALLSERVOS; ServoIndex++)  // 馬達主迴圈
      {
//         Serial.print("miniPlan execAction apache step loop [3]:");
//         Serial.print(InterStepLoop);
//         Serial.print(":");
//          Serial.println(ServoIndex);
        INT_TEMP_A = currentPosition[ServoIndex];                                                    // 馬達現在位置
        INT_TEMP_B = iMatrix[mainActionIndex][ServoIndex] + readKeyValue(ServoIndex);    // 馬達目標位置
        
        if (INT_TEMP_A == INT_TEMP_B)         // 馬達數值不變
        {
          INT_TEMP_C = INT_TEMP_B;
        }

        else if (INT_TEMP_A > INT_TEMP_B)   // 馬達數值減少
        {
          // PWM內差值 = map( 執行次數時間累加, 開始時間, 結束時間, 內差起始值, 內差最大值 )
          INT_TEMP_C =  map(BASEDELAYTIME * InterStepLoop, 0, InterTotalTime, 0, INT_TEMP_A - INT_TEMP_B);

          if (INT_TEMP_A - INT_TEMP_C >= INT_TEMP_B)
          {
            setPWMVal(ServoIndex, INT_TEMP_A - INT_TEMP_C);
          }
        }

        else if (INT_TEMP_A < INT_TEMP_B)   // 馬達數值增加
        {
          // PWM內差值 = map( 執行次數時間累加, 開始時間, 結束時間, 內差起始值, 內差最大值 )
          INT_TEMP_C =  map(BASEDELAYTIME * InterStepLoop, 0, InterTotalTime, 0, INT_TEMP_B - INT_TEMP_A);

          if (INT_TEMP_A + INT_TEMP_C <= INT_TEMP_B)
          {
            setPWMVal(ServoIndex, INT_TEMP_A + INT_TEMP_C);
          }
        }

      }

      delay(BASEDELAYTIME);
    }

    // 備份目前馬達數值
    for ( int Index = 0; Index < ALLMATRIX; Index++)
    {
      //Running_Servo_POS[Index] = iMatrix[MainLoopIndex][Index] + Servo_Act_Fix[Index];
      currentPosition[Index] = iMatrix[mainActionIndex][Index] + readKeyValue(Index);
    }

  }
  
}
/*============================================================================*/
void writeKeyValue(int8_t key, int8_t value)
{
  EEPROM.write(key, value);
  EEPROM.commit();

  int rvalue = EEPROM.read(key);
}


/*============================================================================*/
int8_t readKeyValue(int8_t key)
{
  //Serial.println("read");
  //Serial.println(key);

  int8_t value = EEPROM.read(key);
  return value;
}


